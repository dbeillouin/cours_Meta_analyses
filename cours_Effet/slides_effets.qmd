---
title: "cours_effect_size"
subtitle: "September 2024"
authors: "Damien Beillouin  <br/> 
CIRAD-Hortsys"
format:
  revealjs:
    width: 1150
    margin: 0.08
    transition: slide
    background-transition: fade
    slide-number: true
    show-slide-number: print
    footer: "How to calculate and combine effect-sizes?"
filters:
  - shinylive
editor: visual
title-slide-attributes: 
  data-background-image: elephant.png
  data-background-size: 25%
  data-background-position: 90% 80%
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        font-size: 1.5em;
        color: black;
      }
      </style>
---



## What is an effect-size?

<br> A metric that quantifies the **direction** and **magnitude** of an experimental/observational effect:

-   **Extracted directly** from publications or **calculated** from reported data

-   **Standardized** to be comparable across multiple primary studies

-   **Reliable**: effectively represent the underlying data (e.g., be careful of ratios with low denominators)

## What is an effect-size?

![](images/effect_size_global.png)

## Effect-size and p-value

<br>

-   **Statistical vs. Practical Significance**\
	Small effect sizes can produce significant p-values with large samples but have little real-world impact.

-   **Impact of Sample Size**\
	Large datasets make even tiny effects statistically significant, risking misinterpretation.

-   **Criticisms of p-values**\
	see e.g., [Hasley, 2019](https://royalsocietypublishing.org/doi/10.1098/rsbl.2019.0174); [Chen et al., 2023](https://www.cell.com/patterns/fulltext/S2666-3899(23)00270-2?dgcid=raven_jbs_etoc_email)). Complement with confidence intervals or Bayesian approaches.

## Effect-size and p-value

![](images/ES_and_p_value.png)

in (Goedart, 2018)\[https://thenode.biologists.com/quantification-of-differences-as-alternative-for-p-values/research/\]

## True vs. Estimated Effect Size

<br>

Effect sizes are typically represented by the Greek letter theta (Œ∏):

-   $ùúÉ‚Çñ$: the ‚Äòtrue‚Äô (unknown) effect size of study *k*

-   $\hat{ùúÉ‚Çñ}$ : the observed (estimated) effect size from data in study *k*

	\
	The observed effect size deviates from the true effect size due to **sampling error**:

-   $ùúÉ‚Çñ$ **‚â†** $\hat{ùúÉ‚Çñ}$ because $ùúÉ‚Çñ$ = $\hat{ùúÉ‚Çñ}$+ $ùúÄ‚Çñ$ (where $ùúÄ‚Çñ$ is the sampling error)

## **Goal of meta-analysis**

\
Reduce sampling error to produce accurate estimates that are as close as possible to the **true effect size**.

## We do not know much

Unknown parameters:

-   $ùúÉ‚Çñ$, $\hat{ùúÉ‚Çñ}$, Œµ‚Çñ,

What we do:

==\> $\hat{ùúÉ‚Çñ}$ ÃÇ : Estimated through the mean value (of a sampling distribution)

==\> Œµ‚Çñ : Estimated through the standard error (SE).

(standard error of the mean : ùëÜùê∏= ùë†/‚àöùëõ ; with n: sample size, s: standard dev)

## In a perfect world

Imagine we know the **true mean** (Œº) and **standard deviation** (œÉ) of a distribution perfectly.

e.g.

-   mu \<- 100 \# True mean

-   sigma \<- 15 \# True standard deviation

## True or estimated effect-size?

-   **What happens if we sample this distribution?**

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(
  sidebar = sidebar(open = "open",
	numericInput("n", "Sample count", 100),
	checkboxInput("pause", "Pause", FALSE),
  ),
  plotOutput("plot", width=1100)
)

server <- function(input, output, session) {
  data <- reactive({
	input$resample
	if (!isTRUE(input$pause)) {
  	invalidateLater(1000)
	}
	rnorm(input$n)
  })
 
  output$plot <- renderPlot({
	hist(data(),
  	breaks = 40,
  	xlim = c(-2, 2),
  	ylim = c(0, 1),
  	lty = "blank",
  	xlab = "value",
  	freq = FALSE,
  	main = ""
	)
    
	x <- seq(from = -2, to = 2, length.out = 500)
	y <- dnorm(x)
	lines(x, y, lwd=1.5)
    
	lwd <- 5
	abline(v=0, col="red", lwd=lwd, lty=2)
	abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

	legend(legend = c("Normal", "Mean", "Sample mean"),
  	col = c("black", "red", "blue"),
  	lty = c(1, 2, 1),
  	lwd = c(1, lwd, lwd),
  	x = 1,
  	y = 0.9
	)
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```



